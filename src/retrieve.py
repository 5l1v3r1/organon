#!/usr/bin/python
#coding=utf-8

#This script makes part of Organon Project
#https://github.com/fnk0c/organon

__AUTHOR__ 	= "Fnkoc"
__DATE__ = "05/11/2015"

"""
	Copyright (C) 2015  Franco Colombino & Ygor MÃ¡ximo

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
"""

from re import findall
from subprocess import check_call, CalledProcessError
from colors import *

class download(object):
	def __init__(self, pkg_name, distro, arch):
		self.pkg_name = pkg_name
		self.distro = distro
		self.arch = arch

	def get_mirror(self):
		with open("/etc/organon/mirrors", "r") as mirror:
			mirror = mirror.readline()
			mirror = mirror.replace("\n", "")
	
		self.src_mirror = mirror + "mirror/" + self.arch + "/"
		self.pkg_mirror = mirror + "pkgconfig/" + self.distro + "/"

	def get_files(self):
		src = self.src_mirror + self.pkg_name + ".tar.gz"
		pkg = self.pkg_mirror + self.pkg_name + ".conf"
		print(src)
		print(pkg)

		try:
			check_call("wget %s" % src, shell = True)
		except (CalledProcessError, FileNotFoundError):
			src = src.replace("x86_64", "any").replace("x86", "any")
			check_call("wget %s" % src, shell = True)

class install(object):
	#Template used to do the install
	script_template = \
"""#!/bin/bash

#Copy organon to /usr/share
cp -R .cache/organon /usr/share/

echo \#\!/bin/bash >> /usr/bin/organon
echo cd /usr/share/organon >> /usr/bin/organon
echo exec python organon.py \"\$\@\" >> /usr/bin/organon

chmod +x /usr/bin/organon
chmod 777 /usr/share/organon
"""
	link_template = \
"""#!/bin/bash

#Copy organon to /usr/share
cp -R .cache/organon /usr/share

ln -s /usr/share/organon/organon /usr/bin/organon
"""
	#Store extension
	EXT = {
	"python":"py",
	"ruby":"rb",
	"sh":"sh",
	"php":"php",
	"perl":"pl",
	}

	#Store config file
	pkgconfig = []
	def __init__(self, INSTRUCTIONS, INSTALLER, INSTALLER_TYPE, TYPE):
		self.instructions = INSTRUCTIONS
		self.installer = INSTALLER
		self.installer_type = INSTALLER_TYPE
		self.type = TYPE

	def data(self):
		#open, reads and append config file to list
		try:
			with open(pkg_name + ".conf", "r") as f:
				pkgconfig_file = f.read()
				pkgconfig.append(pkgconfig_file)

		except (FileNotFoundError, IOError, OSError):
			print(red + " [!] " + default + "No tool found on \
database named [%s]" % pkg_name)
			exit()

		#colect data for program compilation and install
		for variables in pkgconfig:
			self.type = findall("type = (.*)", variables)[0]
			self.installer = findall("installer = (.*)", variables)[0]
			self.installer_type = findall("installer_type = (.*)", variables)[0]
			self.instructions = variables[variables.find("{") + 1:variables.find("}")]

	def script_creator(self):
		#generates shell script to compile program

		with open("process.sh", "w") as process:
			process.write("\
#!/bin/bash\n\n\
#This script is generated by organon\n\
" + INSTRUCTIONS.replace("\"", "").replace(",", "").replace("\t", "") +
"#end")

		check_call("sh process.sh", shell = True)

		#Check if program need to be installed manually
		if "True" in INSTALLER:
			#Check if its gonna be created a script or a symlink
			print(INSTALLER_TYPE)
			with open("install.sh", "w") as script:
				if "script" in INSTALLER_TYPE:
					for n in script_template.replace("organon", pkg_name).\
					replace("python", TYPE).replace("py", EXT[TYPE]):
						script.write(n)

				elif "link" in INSTALLER_TYPE:
					for n in link_template.replace("organon", pkg_name):
						script.write(n)
			check_call("sudo sh install.sh", shell = True)	
